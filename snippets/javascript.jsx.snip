snippet arr
abbr arrow_function
options word
  (${1:arguments}) => {
    ${2:code...}
  }

snippet arri
abbr arrow_function_inline
options word
  (${1:arguments}) => ${2:code...}

snippet log
abbr console.log
options word
  console.log(${1:args});

snippet then
abbr then
options word
  .then(${1:callback})${2:;}

snippet desc
abbr describe
options word
  describe('${1:when}', () => {
    ${2:its}
  });

snippet before
abbr beforeEach
options word
  beforeEach((${1:done}) => {
    ${3:config...}
  });

snippet exp
abbr expect
options word
  expect(${1:result}).${2:toBe}(${3:expected});

snippet it
abbr it
options word
  it('${1:should}', (${2:done}) => {
    ${3:expects...}
  });

snippet spy
abbr spyOn
options word
  spyOn(${1:object}, '${2:method}')${3:;}

snippet returnV
abbr and.returnValue
options word
  .and.returnValue(${1:value});

snippet stringify
abbr JSON.stringify
options word
  JSON.stringify(${1:variable}, null, ' ')

snippet react redux class
abbr reactredux
options word
  import PropTypes from 'prop-types';
  import React, {Component} from 'react';
  import {connect} from 'react-redux';
  import {bindActionCreators} from 'redux';

  class ${1:className} extends Component {

    render() {
      return <div/>;
    }
  }

  ${1:className}.propTypes = {
  };

  export function mapStateToProps() {
    return {
    };
  }

  function mapDispatchToProps(dispatch) {
    return bindActionCreators({}, dispatch);
  }

  export default connect(mapStateToProps, mapDispatchToProps)(${1:className});
